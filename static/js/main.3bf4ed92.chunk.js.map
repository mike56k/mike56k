{"version":3,"sources":["components/Navbar.js","components/AboutMeCard.js","components/Skills.js","components/SimpleCard.js","components/Contacts.js","components/JustGrid.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","color","marginBottom","menuButton","marginRight","spacing","title","Navbar","classes","className","AppBar","position","Toolbar","style","background","Typography","Button","onClick","window","open","marginTop","bullet","display","margin","transform","fontSize","pos","accord","width","backgroundColor","heading","typography","pxToRem","fontWeight","fontWeightRegular","SharpCard","Card","CardContent","justifyContent","flexWrap","colorCount","Skills","props","useState","someColor","skills","map","skill","Chip","label","console","log","SimpleCard","variant","component","level","CardActions","Accordion","AccordionSummary","expandIcon","aria-controls","id","AccordionDetails","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","projects","project","key","name","scope","status","link","disabled","Alert","elevation","minWidth","Contacts","React","setOpen","handleClose","event","reason","telegaArea","useRef","emailArea","githubArea","copyCodeToClipboard","someArea","text","current","textContent","navigator","clipboard","writeText","then","catch","err","role","List","ListItem","button","ListItemIcon","ListItemText","ref","primary","Snackbar","autoHideDuration","onClose","severity","paper","textAlign","palette","secondary","AutoGrid","bull","Grid","container","item","xs","AboutMeCard","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3bf4ed92.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    color: \"gainsboro\",\n    marginBottom: 10,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\nconst Navbar = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar style={{ background: \"#222\" }}>\n          <Typography style={{ color: \"gainsboro\" }} className={classes.title}>\n            <h2>Mikhail Isachenko</h2>\n          </Typography>\n          <Button\n            style={{ color: \"gainsboro\" }}\n            color=\"inherit\"\n            onClick={() => {\n              window.open(\"https://github.com/mike56k\");\n            }}\n          >\n            <h2>GitHub</h2>\n          </Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\nexport default Navbar;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: 10,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  accord: {\n    width: \"100%\",\n    backgroundColor: \"#333\",\n    color: \"gainsboro\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n}));\nconst SharpCard = () => {\n  const classes = useStyles();\n  return (\n    <div>\n      <Card\n        className={classes.root}\n        style={{ background: \"#222\", color: \"gainsboro\" }}\n      >\n        <CardContent>\n          <Typography>\n            {\" \"}\n            <h2>About Me</h2>\n          </Typography>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\nexport default SharpCard;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Chip from \"@material-ui/core/Chip\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(0.5),\n    },\n  },\n}));\nlet colorCount = 0;\nfunction getIndex() {\n  if (colorCount > 1) {\n    colorCount = 0;\n  } else {\n    colorCount++;\n  }\n  console.log(colorCount);\n  return colorCount;\n}\nconst Skills = (props) => {\n  const classes = useStyles();\n\n  const [someColor] = useState([\"primary\", \"secondary\", \"\"]);\n\n  return (\n    <div className={classes.root}>\n      {props.skills.map((skill) => (\n        <Chip label={skill} color={someColor[getIndex()]} />\n      ))}\n\n      {/* <Chip\n        icon={<DesktopWindowsIcon />}\n        label=\"Windows Forms\"\n        onClick={handleClick}\n        color=\"primary\"\n      />\n      <Chip\n        label=\"Selenium\"\n        avatar={<Avatar>S</Avatar>}\n        onClick={handleClick}\n      />\n      <Chip icon={<DeveloperBoardIcon />} label=\"WPF\" onClick={handleClick} />\n      <Chip\n        label=\"Entity Framework\"\n        avatar={<Avatar>E</Avatar>}\n        onClick={handleClick}\n        color=\"secondary\"\n      /> */}\n    </div>\n  );\n};\nexport default Skills;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport Button from \"@material-ui/core/Button\";\n\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport Skills from \"./Skills\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: 10,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  accord: {\n    width: \"100%\",\n    backgroundColor: \"#333\",\n    color: \"gainsboro\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n}));\n\nconst SimpleCard = (props) => {\n  const classes = useStyles();\n  return (\n    <div>\n      <Card\n        className={classes.root}\n        style={{ background: \"#222\", color: \"gainsboro\" }}\n      >\n        <CardContent>\n          <Typography variant=\"h5\" component=\"h2\">\n            {props.title}\n          </Typography>\n          <Typography className={classes.pos}>{props.level}</Typography>\n          <Typography variant=\"body2\" component=\"p\">\n            Skills\n          </Typography>\n          <Skills skills={props.skills} />\n        </CardContent>\n        <CardActions>\n          <Accordion className={classes.accord}>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1a-content\"\n              id=\"panel1a-header\"\n            >\n              <Typography className={classes.heading}>\n                <h3>Projects</h3>\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <TableContainer component={Paper} style={{ background: \"#444\" }}>\n                <Table aria-label=\"simple table\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>\n                        <h4>Name</h4>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <h4>Status</h4>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <h4>Link</h4>\n                      </TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {props.projects.map((project) => (\n                      <TableRow key={project.name}>\n                        <TableCell component=\"th\" scope=\"row\">\n                          <h4>{project.name}</h4>\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          {project.status === \"complete\" ? (\n                            <h4 style={{ color: \"green\" }}>{project.status}</h4>\n                          ) : (\n                            <h4 className=\"status\">{project.status}</h4>\n                          )}\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          {project.link === \"soon\" ? (\n                            <Button disabled>\n                              <h4>SOON</h4>\n                            </Button>\n                          ) : (\n                            <Button\n                              onClick={() => {\n                                window.open(project.link);\n                              }}\n                            >\n                              <h4>HERE</h4>\n                            </Button>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </AccordionDetails>\n          </Accordion>\n        </CardActions>\n      </Card>\n    </div>\n  );\n};\nexport default SimpleCard;\n","import React, { useRef } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport TelegramIcon from \"@material-ui/icons/Telegram\";\nimport AlternateEmailIcon from \"@material-ui/icons/AlternateEmail\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minWidth: 275,\n    marginTop: 10,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  accord: {\n    width: \"100%\",\n    backgroundColor: \"#333\",\n    color: \"gainsboro\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n}));\nconst Contacts = () => {\n  const [open, setOpen] = React.useState(false);\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n  const classes = useStyles();\n  const telegaArea = useRef(null);\n  const emailArea = useRef(null);\n  const githubArea = useRef(null);\n\n  const copyCodeToClipboard = (someArea) => {\n    const text = someArea.current.textContent;\n    navigator.clipboard\n      .writeText(text)\n      .then(() => {\n        handleClick();\n      })\n      .catch((err) => {\n        console.log(\"Something went wrong\", err);\n      });\n  };\n  return (\n    <div>\n      <Card\n        className={classes.root}\n        style={{ background: \"#222\", color: \"gainsboro\" }}\n      >\n        <CardActions>\n          <Accordion className={classes.accord}>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1a-content\"\n              id=\"panel1a-header\"\n            >\n              <Typography className={classes.heading}>\n                <h2>\n                  Contacts{\" \"}\n                  <span role=\"img\" aria-label=\"sheep\">\n                    💬\n                  </span>\n                </h2>\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <List\n                component=\"nav\"\n                className={classes.root}\n                aria-label=\"contacts\"\n              >\n                <ListItem\n                  button\n                  onClick={() => {\n                    copyCodeToClipboard(telegaArea);\n                  }}\n                >\n                  <ListItemIcon>\n                    <TelegramIcon style={{ color: \"gainsboro\" }} />\n                  </ListItemIcon>\n                  <ListItemText ref={telegaArea} primary=\"@ogseee\" />\n                </ListItem>\n                <ListItem\n                  button\n                  onClick={() => {\n                    copyCodeToClipboard(emailArea);\n                  }}\n                >\n                  <ListItemIcon>\n                    <AlternateEmailIcon style={{ color: \"gainsboro\" }} />\n                  </ListItemIcon>\n                  <ListItemText ref={emailArea} primary=\"miha.is@mail.ru\" />\n                </ListItem>\n                <ListItem\n                  button\n                  onClick={() => {\n                    copyCodeToClipboard(githubArea);\n                  }}\n                >\n                  <ListItemIcon>\n                    <GitHubIcon style={{ color: \"gainsboro\" }} />\n                  </ListItemIcon>\n                  <ListItemText\n                    ref={githubArea}\n                    primary=\"https://github.com/mike56k\"\n                  />\n                </ListItem>\n              </List>\n            </AccordionDetails>\n          </Accordion>\n        </CardActions>\n      </Card>\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"success\">\n          Copied successfully!\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\nexport default Contacts;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport AboutMeCard from \"./AboutMeCard\";\nimport SimpleCard from \"./SimpleCard\";\nimport Contacts from \"./Contacts\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport default function AutoGrid() {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•NET</span>;\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs>\n          <Paper className={classes.paper}>\n            <AboutMeCard />\n          </Paper>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        <Grid item xs>\n          <Paper className={classes.paper}>\n            <SimpleCard\n              title={bull}\n              level=\"Junior\"\n              skills={[\"C#\", \"Windows Forms\", \"Entity Framework\", \"WPF\"]}\n              projects={[\n                {\n                  name: \"SNKRS.COM AUTOMATIZATION BOT\",\n                  status: \"in progress\",\n                  link: \"soon\",\n                },\n              ]}\n            />\n          </Paper>\n        </Grid>\n        <Grid item xs>\n          <Paper className={classes.paper}>\n            <SimpleCard\n              title=\"React\"\n              level=\"Junior\"\n              skills={[\"JS\", \"Redux\", \"HTML\", \"CSS\", \"Firebase\"]}\n              projects={[\n                {\n                  name: \"ToDo App + FireBase\",\n                  status: \"complete\",\n                  link: \"https://github.com/mike56k/todoappreact\",\n                },\n              ]}\n            />\n          </Paper>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        <Grid item xs>\n          <Paper className={classes.paper}>\n            <Contacts />\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar.js\";\nimport CenteredGrid from \"./components/JustGrid\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <CenteredGrid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}